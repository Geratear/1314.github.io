<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>保护线</title>
      <link href="2022/05/17/%E7%94%9F%E6%B4%BB/%E4%BF%9D%E6%8A%A4%E7%BA%BF/"/>
      <url>2022/05/17/%E7%94%9F%E6%B4%BB/%E4%BF%9D%E6%8A%A4%E7%BA%BF/</url>
      
        <content type="html"><![CDATA[<p><strong>保护线</strong><br>微风拂过天空中的笑容<br>两人相约十一号站台路口<br>一路心灵璀璨闪耀着<br>路过一则树林<br>行则一水浮花<br>优雅的步伐透过云儿的清香<br>相片拟成爱的保护线</p>]]></content>
      
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>相遇的心门</title>
      <link href="2022/05/17/%E7%94%9F%E6%B4%BB/%E7%9B%B8%E9%81%87%E7%9A%84%E5%BF%83%E9%97%A8/"/>
      <url>2022/05/17/%E7%94%9F%E6%B4%BB/%E7%9B%B8%E9%81%87%E7%9A%84%E5%BF%83%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<p><strong>相遇的心门</strong><br>相遇的心门<br>只是两人的心灵颤动的眼眸<br>两人如诗词般的结合<br>相遇是天俞之翼<br>两人心儿以飞向天空之时<br>心儿心儿快快<br>勇敢的踏出心门<br>她的背影是一副美丽的山水图<br>她的笑容是那么的可爱而从容<br>君可否知晓<br>君可否期待</p>]]></content>
      
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>雪中的太阳</title>
      <link href="2022/05/10/%E7%94%9F%E6%B4%BB/%E9%9B%AA%E4%B8%AD%E7%9A%84%E5%A4%AA%E9%98%B3/"/>
      <url>2022/05/10/%E7%94%9F%E6%B4%BB/%E9%9B%AA%E4%B8%AD%E7%9A%84%E5%A4%AA%E9%98%B3/</url>
      
        <content type="html"><![CDATA[<p><strong>雪中的太阳</strong><br>漫漫飘雪飞絮<br>飘雪如同洁白的仙女<br>点点雪花似是太阳雨花<br>穿着洁白的天使裙<br>插上天使的翅膀<br>飞向有你的天空<br>倾听萤火的歌声<br>带你去远方<br>萤火的光照向有你的远方<br>雪中的晨光照耀你的脸庞<br>萤火微光照向黑暗<br>黑暗里的微光照耀你的心堂<br>闪烁的光耀照亮有你的地方<br>星空之光闪耀你身旁<br>洁白的花儿绽放芬芳</p>]]></content>
      
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>摘月的姑娘</title>
      <link href="2022/05/04/%E7%94%9F%E6%B4%BB/%E6%91%98%E6%9C%88%E7%9A%84%E5%A7%91%E5%A8%98/"/>
      <url>2022/05/04/%E7%94%9F%E6%B4%BB/%E6%91%98%E6%9C%88%E7%9A%84%E5%A7%91%E5%A8%98/</url>
      
        <content type="html"><![CDATA[<p><strong>摘月的姑娘</strong><br>星辰明月只为遇见你<br>待到明月花开时<br>便是相约之日的思念</p><p>————By:倾玄</p>]]></content>
      
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>指尖思念的泪花</title>
      <link href="2022/05/04/%E7%94%9F%E6%B4%BB/%E6%8C%87%E5%B0%96%E6%80%9D%E5%BF%B5%E7%9A%84%E6%B3%AA%E8%8A%B1/"/>
      <url>2022/05/04/%E7%94%9F%E6%B4%BB/%E6%8C%87%E5%B0%96%E6%80%9D%E5%BF%B5%E7%9A%84%E6%B3%AA%E8%8A%B1/</url>
      
        <content type="html"><![CDATA[<p><strong>指尖思念的泪花</strong><br>清澈的眼眸如水一般透明<br>指尖传来他的无奈<br>也许是隔离之间的彩虹桥<br>他的思念传来他的泪花<br>泪花是一种无常的牵挂<br>泪花一点一滴流过花草之间<br>而他却无法做出正确的解答<br>只是两人的无奈之举的邂逅<br>美丽的误会引来他的思念<br>思念却成为永恒的泪花</p><p>————By:倾玄</p>]]></content>
      
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>黑名单的爱情</title>
      <link href="2022/05/04/%E7%94%9F%E6%B4%BB/%E9%BB%91%E5%90%8D%E5%8D%95%E7%9A%84%E7%88%B1%E6%83%85/"/>
      <url>2022/05/04/%E7%94%9F%E6%B4%BB/%E9%BB%91%E5%90%8D%E5%8D%95%E7%9A%84%E7%88%B1%E6%83%85/</url>
      
        <content type="html"><![CDATA[<p><strong>黑名单的爱情</strong><br>相遇的莲花开了吗<br>我们相遇的树<br>是否如同秋叶飘落<br>相遇是否是美丽的误会<br>第一次凭直觉喜欢<br>相见恨晚的感情<br>无数的尬聊抱歉<br>信息轰炸给你带来了困扰<br>千言万语抵不过<br>一句我想你<br>与你对视的眼眸<br>一种手势一眼眸<br>皆是我内心的回忆<br>花开花落<br>你我前行时且<br>停下回忆的痕迹</p><p>————By:倾玄</p>]]></content>
      
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大数据</title>
      <link href="2021/09/28/%E6%8A%80%E6%9C%AF/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
      <url>2021/09/28/%E6%8A%80%E6%9C%AF/%E5%A4%A7%E6%95%B0%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[<p>Hadoop</p><p>分布式</p><p>离线：已经存在的数据（静态的）</p><h2 id="分布式："><a href="#分布式：" class="headerlink" title="分布式："></a>分布式：</h2><ol><li><p>分而治之（分布式存储）</p><p>将超级大的文件切分成多个小文件，每一个小文件存储在一个服务器上（无限扩展服务器的数量）</p></li><li><p>纵向扩展</p><p>可以在一台服务器上加硬盘</p></li></ol><p>摩尔定律</p><h2 id="大数据"><a href="#大数据" class="headerlink" title="大数据"></a>大数据</h2><p>数据的分类：</p><ol><li>结构化数据：Mysql、excel</li><li>非结构化数据：图片、视频、音频（二进制存储）</li><li>半结构化数据：HTML、CSS、XML、Json</li></ol><p>产生时间：</p><ol><li>离线数据：数据已经存在的（静态）</li><li>实时数据：实时产生的数据（动态）</li><li>近实时数据：</li></ol><p>大数据：大而复杂的数据集（存储 | 计算）</p><p>容量大、种类多、速度快、整体数据价值高</p><h2 id="大数据核心概念"><a href="#大数据核心概念" class="headerlink" title="大数据核心概念"></a>大数据核心概念</h2><ol><li>集数（多个服务器组成的集体叫集群）</li><li>分布式（一个任务需要多个节点共同完成，执行方式就是分布式）</li></ol><p>分布式存储：</p><ol><li>分布式文件系统</li><li>分布式数据库</li></ol><p>分布式计算：</p><ol><li>将计算任务进行拆分，分别运行在不同节点上计算</li></ol><p>负载均衡：</p><p>一个集群中，各个节点承担的存储（压力）相当</p><p>负载均衡一定和每一个节点的硬盘配置相关</p><p>集群中的每一个节点存储的数据量的占比相当的</p><h2 id="数据处理流程："><a href="#数据处理流程：" class="headerlink" title="数据处理流程："></a>数据处理流程：</h2><p>数据采集——数据存储——数据清洗——数据计算——数据存储结果——数据可视化展示</p>]]></content>
      
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>闲暇的无聊</title>
      <link href="2021/09/17/%E7%94%9F%E6%B4%BB/%E9%97%B2%E6%9A%87%E7%9A%84%E6%97%A0%E8%81%8A/"/>
      <url>2021/09/17/%E7%94%9F%E6%B4%BB/%E9%97%B2%E6%9A%87%E7%9A%84%E6%97%A0%E8%81%8A/</url>
      
        <content type="html"><![CDATA[<p>由于最近把游戏给卸载了，所以空闲时间还挺多的。本来是下定决心做点什么的，最后也想不出能做什么。</p><p>看过一个很好的节目（新城商业）<a href="%E6%96%B0%E5%9F%8E%E5%95%86%E4%B8%9A">https://i.youku.com/i/UMTgwNDU5NjY4MA==?spm=a2hzp.8253869.0.0</a></p><p>结果由于新城的运营导致停止运营了，很可惜的一个节目，在国内算是很好的节目了，对科技感兴趣的童鞋可以好好看看。</p><p>又找回以前的LED小灯泡，本来这个灯泡是打算DIY一个广州小蛮腰的灯塔的。现在只有灯泡了，本来这个LED灯是送给一个女生的。这个灯泡还是2019年的圣诞节前一个星期买的，可惜DIY失败，女生也没了。</p><p>由于实在太无聊了，只好听歌了，把《相见恨晚》听了很多遍。其中的心情可能和一个女生有关吧。听歌和听电台是一种享受吧。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>近期畅谈</title>
      <link href="2021/09/12/%E7%94%9F%E6%B4%BB/%E8%BF%91%E6%9C%9F%E7%95%85%E8%B0%88/"/>
      <url>2021/09/12/%E7%94%9F%E6%B4%BB/%E8%BF%91%E6%9C%9F%E7%95%85%E8%B0%88/</url>
      
        <content type="html"><![CDATA[<p><strong>近期</strong></p><p>从2020年起出现特殊状况离开深圳一年，离开的这一年真是一言难尽。还好都过去了，更具自己的预判从2016年经济出现下滑起，就是意料之中有所改变。经济下滑加上疫情打乱了很多人的计划，很多原本计划好的事情被改变得一塌糊涂。</p><p>更具自己的预判加直觉一时之间很难经济回转，最快也需要到2023年经济出现回转和稳定的局势。更具近期状况互联网局势也是出现一片调整，各大公司下架企业应用（APP）被叫停，游戏行业更是如此。虽然作为一个互联网新人，但是我的直觉错不了。现在很多行业被调整，必然牵扯到一定的经济局势。</p><p>高速发展的今天，必然只有打破常规创新才是一个时代前进的方向。AI时代的今天，很多行业必然会受到牵连。只有接受时代的改变才能从中发现原因。未来的时代每个人具备的简单技能就是阅读，只有阅读才能了解一切。</p><p>时代不会等待每个人，只有不断的准备时代的迎接才是最好的选择。阅读是一个枯燥且无聊的过程，但是阅读是一个提升最好的方式。在这个快节奏的时代里很少有人浪费时间做一些在自己看来毫无意义的事，因为每个人的时间很宝贵。</p><p>最近一年没有唱歌了，不得不说又变成五音不全的狮子吼。今天不唱，明天变垃圾。突然发现自己码字的水平也是一般般，写作对于我来说算是一个弱项了。最近又快上涨一岁了，还有几天就23岁了不得不说我又老了。</p><p>写给23岁的自己，希望自己能够不疾不徐，好好提升自己。能够在未来的某一天想起自己也曾努力过，至少不留下遗憾。其实以错过了很多，但希望不错过一些自己认为不能错过的事情吧，比如（事业、爱情、家人）</p><p>​                                ——————写于2021年9月12日  By:轩</p>]]></content>
      
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬虫基础篇——之多线程multipprocessing.dummy</title>
      <link href="2021/09/07/%E7%88%AC%E8%99%AB/%E8%B1%86%E7%93%A3%E7%88%AC%E5%8F%96%E2%80%94%E4%B9%8B%E5%A4%9A%E7%BA%BF%E7%A8%8Bmultiprocessing.dummy/"/>
      <url>2021/09/07/%E7%88%AC%E8%99%AB/%E8%B1%86%E7%93%A3%E7%88%AC%E5%8F%96%E2%80%94%E4%B9%8B%E5%A4%9A%E7%BA%BF%E7%A8%8Bmultiprocessing.dummy/</url>
      
        <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> Queue</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入多线程的线程池</span></span><br><span class="line"><span class="comment"># multiprocessing.dummy 是多进程提供的多线程库</span></span><br><span class="line"><span class="keyword">from</span> multiprocessing.dummy <span class="keyword">import</span> Pool</span><br><span class="line"></span><br><span class="line"><span class="comment">#import threading</span></span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DoubanSpider</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.data_queue = Queue.Queue()</span><br><span class="line">        self.base_url = <span class="string">&quot;http://movie.douban.com/top250?start=&quot;</span></span><br><span class="line">        self.headers = &#123;<span class="string">&quot;User-Agent&quot;</span> : <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; WOW64; Trident/7.0; rv:11.0) like Gecko&quot;</span>&#125;</span><br><span class="line">        self.num = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">load_page</span>(<span class="params">self, url</span>):</span></span><br><span class="line">        <span class="built_in">print</span> <span class="string">&quot;[INFO]: 正在抓取 %s &quot;</span> % url</span><br><span class="line">        html = requests.get(url, headers = self.headers).content</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> html</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_page</span>(<span class="params">self, url</span>):</span></span><br><span class="line">        html = self.load_page(url)</span><br><span class="line">        html_obj = etree.HTML(html)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 当前页面的所有电影结点的列表</span></span><br><span class="line">        node_list = html_obj.xpath(<span class="string">&quot;//div[@class=&#x27;info&#x27;]&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 迭代每个结点，进行取值</span></span><br><span class="line">        <span class="keyword">for</span> node <span class="keyword">in</span> node_list:</span><br><span class="line">            <span class="comment"># 电影标题</span></span><br><span class="line">            title = node.xpath(<span class="string">&quot;.//span[@class=&#x27;title&#x27;]/text()&quot;</span>)[<span class="number">0</span>]</span><br><span class="line">            <span class="comment"># 电影评分</span></span><br><span class="line">            score = node.xpath(<span class="string">&quot;.//span[@class=&#x27;rating_num&#x27;]/text()&quot;</span>)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">            self.data_queue.put(score + <span class="string">&quot;\t&quot;</span> + title)</span><br><span class="line">            self.num += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span>(<span class="params">self</span>):</span></span><br><span class="line">        url_list = [self.base_url + <span class="built_in">str</span>(num) <span class="keyword">for</span> num <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">225</span> + <span class="number">1</span>, <span class="number">25</span>)]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">#for url in url_list:</span></span><br><span class="line">        <span class="comment">#    self.parse_page(url)</span></span><br><span class="line"></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        thread_list = []</span></span><br><span class="line"><span class="string">        for url in url_list:</span></span><br><span class="line"><span class="string">            # 创建一个线程，并指定执行的任务</span></span><br><span class="line"><span class="string">            thread = threading.Thread(target = self.parse_page, args = [url])</span></span><br><span class="line"><span class="string">            # 启动线程</span></span><br><span class="line"><span class="string">            thread.start()</span></span><br><span class="line"><span class="string">            thread_list.append(thread)</span></span><br><span class="line"><span class="string">            # thread.join()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        # 让主线程阻塞，等待所有的子线程结束，再继续执行。</span></span><br><span class="line"><span class="string">        for thread in thread_list:</span></span><br><span class="line"><span class="string">            thread.join()</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 创建10个线程的线程池</span></span><br><span class="line">        pool = Pool(<span class="built_in">len</span>(url_list))</span><br><span class="line">        <span class="comment"># map()高阶函数，用来批量处理函数传参</span></span><br><span class="line">        pool.<span class="built_in">map</span>(self.parse_page, url_list)</span><br><span class="line">        <span class="comment"># 关闭线程池</span></span><br><span class="line">        pool.close()</span><br><span class="line">        <span class="comment"># 阻塞主线程，等待子线程结束</span></span><br><span class="line">        pool.join()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> self.data_queue.empty():</span><br><span class="line">            <span class="built_in">print</span> self.data_queue.get()</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span> self.num</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    douban = DoubanSpider()</span><br><span class="line">    start = time.time()</span><br><span class="line">    douban.main()</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;[INFO]: Useing time %f seconds.&quot;</span> % (time.time() - start)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬虫基础篇——之单线程爬虫</title>
      <link href="2021/09/07/%E7%88%AC%E8%99%AB/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%88%AC%E8%99%AB%E2%80%94%E4%B9%8B%E8%B1%86%E7%93%A3%E7%88%AC%E5%8F%96/"/>
      <url>2021/09/07/%E7%88%AC%E8%99%AB/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%88%AC%E8%99%AB%E2%80%94%E4%B9%8B%E8%B1%86%E7%93%A3%E7%88%AC%E5%8F%96/</url>
      
        <content type="html"><![CDATA[<p>多线程爬虫案例：</p><p>栗子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment"># 日期：2021年9月7日19:40:54</span></span><br><span class="line"><span class="comment"># 作者：GeraTear</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> Queue</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DoubanSpider</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.data_queue = Queue.Queue()</span><br><span class="line">        self.base_url = <span class="string">&quot;http://movie.douban.com/top250?start=&quot;</span></span><br><span class="line">        self.headers = &#123;<span class="string">&quot;User-Agent&quot;</span> : <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; WOW64; Trident/7.0; rv:11.0) like Gecko&quot;</span>&#125;</span><br><span class="line">        self.num = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">load_page</span>(<span class="params">self, url</span>):</span></span><br><span class="line">        <span class="built_in">print</span> <span class="string">&quot;[INFO]: 正在抓取 %s &quot;</span> % url</span><br><span class="line">        html = requests.get(url, headers = self.headers).content</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> html</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_page</span>(<span class="params">self, url</span>):</span></span><br><span class="line">        html = self.load_page(url)</span><br><span class="line">        html_obj = etree.HTML(html)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 当前页面的所有电影结点的列表</span></span><br><span class="line">        node_list = html_obj.xpath(<span class="string">&quot;//div[@class=&#x27;info&#x27;]&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 迭代每个结点，进行取值</span></span><br><span class="line">        <span class="keyword">for</span> node <span class="keyword">in</span> node_list:</span><br><span class="line">            <span class="comment"># 电影标题</span></span><br><span class="line">            title = node.xpath(<span class="string">&quot;.//span[@class=&#x27;title&#x27;]/text()&quot;</span>)[<span class="number">0</span>]</span><br><span class="line">            <span class="comment"># 电影评分</span></span><br><span class="line">            score = node.xpath(<span class="string">&quot;.//span[@class=&#x27;rating_num&#x27;]/text()&quot;</span>)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">            self.data_queue.put(score + <span class="string">&quot;\t&quot;</span> + title)</span><br><span class="line">            self.num += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span>(<span class="params">self</span>):</span></span><br><span class="line">        url_list = [self.base_url + <span class="built_in">str</span>(num) <span class="keyword">for</span> num <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">225</span> + <span class="number">1</span>, <span class="number">25</span>)]</span><br><span class="line">        <span class="comment"># for url in url_list:</span></span><br><span class="line">        <span class="comment">#     self.parse_page(url)</span></span><br><span class="line"></span><br><span class="line">        thread_list = []</span><br><span class="line">        <span class="keyword">for</span> url <span class="keyword">in</span> url_list:</span><br><span class="line">            <span class="comment"># 创建一个线程,并指定执行的任务</span></span><br><span class="line">           thread = threading.Thread(target= self.parse_page,args= [url])</span><br><span class="line">           thread.start()</span><br><span class="line">           thread_list.append(thread)</span><br><span class="line">            <span class="comment">#让主线程阻塞,等待所有的子线程结束,再继续执行</span></span><br><span class="line">        <span class="keyword">for</span> thread <span class="keyword">in</span> thread_list:</span><br><span class="line">            thread.join()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> self.data_queue.empty():</span><br><span class="line">            <span class="built_in">print</span> self.data_queue.get()</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span> self.num</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    douban = DoubanSpider()</span><br><span class="line">    start = time.time()</span><br><span class="line">    douban.main()</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;[INFO]: Useing time %f seconds.&quot;</span> % (time.time() - start)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬虫基础篇——之单线程爬虫</title>
      <link href="2021/09/07/%E7%88%AC%E8%99%AB/%E5%8D%95%E7%BA%BF%E7%A8%8B%E7%88%AC%E8%99%AB%E2%80%94%E4%B9%8B%E8%B1%86%E7%93%A3%E7%88%AC%E5%8F%96/"/>
      <url>2021/09/07/%E7%88%AC%E8%99%AB/%E5%8D%95%E7%BA%BF%E7%A8%8B%E7%88%AC%E8%99%AB%E2%80%94%E4%B9%8B%E8%B1%86%E7%93%A3%E7%88%AC%E5%8F%96/</url>
      
        <content type="html"><![CDATA[<p>单线程爬虫案例：</p><p>栗子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment"># 日期：2021年9月7日19:14:47</span></span><br><span class="line"><span class="comment"># 作者：GeraTear</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> Queue</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DoubanSpider</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.data_queue = Queue.Queue()</span><br><span class="line">        self.base_url = <span class="string">&quot;http://movie.douban.com/top250?start=&quot;</span></span><br><span class="line">        self.headers = &#123;<span class="string">&quot;User-Agent&quot;</span> : <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; WOW64; Trident/7.0; rv:11.0) like Gecko&quot;</span>&#125;</span><br><span class="line">        self.num = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">load_page</span>(<span class="params">self, url</span>):</span></span><br><span class="line">        <span class="built_in">print</span> <span class="string">&quot;[INFO]: 正在抓取 %s &quot;</span> % url</span><br><span class="line">        html = requests.get(url, headers = self.headers).content</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> html</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_page</span>(<span class="params">self, url</span>):</span></span><br><span class="line">        html = self.load_page(url)</span><br><span class="line">        html_obj = etree.HTML(html)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 当前页面的所有电影结点的列表</span></span><br><span class="line">        node_list = html_obj.xpath(<span class="string">&quot;//div[@class=&#x27;info&#x27;]&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 迭代每个结点，进行取值</span></span><br><span class="line">        <span class="keyword">for</span> node <span class="keyword">in</span> node_list:</span><br><span class="line">            <span class="comment"># 电影标题</span></span><br><span class="line">            title = node.xpath(<span class="string">&quot;.//span[@class=&#x27;title&#x27;]/text()&quot;</span>)[<span class="number">0</span>]</span><br><span class="line">            <span class="comment"># 电影评分</span></span><br><span class="line">            score = node.xpath(<span class="string">&quot;.//span[@class=&#x27;rating_num&#x27;]/text()&quot;</span>)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">            self.data_queue.put(score + <span class="string">&quot;\t&quot;</span> + title)</span><br><span class="line">            self.num += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span>(<span class="params">self</span>):</span></span><br><span class="line">        url_list = [self.base_url + <span class="built_in">str</span>(num) <span class="keyword">for</span> num <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">225</span> + <span class="number">1</span>, <span class="number">25</span>)]</span><br><span class="line">        <span class="keyword">for</span> url <span class="keyword">in</span> url_list:</span><br><span class="line">            self.parse_page(url)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> self.data_queue.empty():</span><br><span class="line">            <span class="built_in">print</span> self.data_queue.get()</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span> self.num</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    douban = DoubanSpider()</span><br><span class="line">    start = time.time()</span><br><span class="line">    douban.main()</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;[INFO]: Useing time %f seconds.&quot;</span> % (time.time() - start)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬虫基础篇——之Cookie</title>
      <link href="2021/09/06/%E7%88%AC%E8%99%AB/%E4%BD%BF%E7%94%A8Cookie%E8%BF%9B%E8%A1%8C%E7%BD%91%E7%AB%99%E7%99%BB%E5%BD%95%E7%8A%B6%E6%80%81%E4%BF%9D%E6%8C%81/"/>
      <url>2021/09/06/%E7%88%AC%E8%99%AB/%E4%BD%BF%E7%94%A8Cookie%E8%BF%9B%E8%A1%8C%E7%BD%91%E7%AB%99%E7%99%BB%E5%BD%95%E7%8A%B6%E6%80%81%E4%BF%9D%E6%8C%81/</url>
      
        <content type="html"><![CDATA[<h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><p>HTTP是无状态的面向连接的协议，服务器和客户端的交互仅限于请求/响应过程，结束之后便断开，在下一次请求时，服务器会认为新的客户端。为了维护他们之间的链接，让服务器知道这是之前某个用户发送的请求，则必须在一个地方保存客户端的信息。</p><p><strong>Cookie</strong>：通过在 客户端 记录的信息确定用户的身份。</p><p><strong>Session</strong>：通过在 服务器端 记录的信息确定用户的身份。</p><p>Cookie 是指某些网站服务器为了辨别用户身份和进行Session跟踪，而储存在用户浏览器上的文本文件，Cookie可以保持登录信息到用户下次与服务器的会话</p><p>栗子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> urllib2</span><br><span class="line"></span><br><span class="line">header = &#123;<span class="string">&quot;User-Agent&quot;</span>:<span class="string">&quot;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.102 Safari/537.36&quot;</span>,</span><br><span class="line">          <span class="string">&quot;Cookie&quot;</span>:<span class="string">&quot;uuid_tt_dd=-8029438850993860835_20171017; __gads=ID=e106ad9f58fb9c92-222de2144ccb0056:T=1630497961:RT=1630497961:S=ALNI_MbrSsuP1ydPHAyM2QuDx92EGyBppg; csrfToken=6bkjwDuaspuWKypI7yiqsScg; c_first_ref=default; c_first_page=https%3A//www.csdn.net/; dc_sid=a3f8fa77c2693870b4356b7fb76094a8; SESSION=e3766f16-2bc4-4fe5-b8ec-fedfee4e0e1c; ssxmod_itna=Yq0hDKAIqAxIox+xBPwKx9BtGC8tQGkKE0bI+DBdSeiNDnD8x7YDvI+OiIQTeThiDahqE4hh0fxjbhnrfxQ8zSeDIDmKDyDW5DlDDbH47DlPKKaIDBYDhxG=yHy4A6X5DB4wXDzdMHDTxGafxiitDDrDjuHDY9FHgKDmxGtsxGWDWWa7bBs7UBHaaaGDnW+EW3Dy2KDRxiOD0RHDmWFDQ91TePWA10e/IDWm0hqrBDqqWxqCG2DwBGqTB0Doi=qh024AlM95DDW=Ld34D===; ssxmod_itna2=Yq0hDKAIqAxIox+xBPwKx9BtGC8tQGkKE0bD8MekBDGXmxQGaK7KmH1x8hT/itbYt6nOu5i47YSAvUYDwehYdOSbikBNvRjY1iQOG4d=4qUDatux6x6+ldeiK6CCLDygsxI71gengS35Y0=OSoAF/g3FbljR8lKdYSEs+BN1FLbpj+KgISA5cgIviWWiyjNN=pn=w7=u3cR0iwY7ykoGA2hou=wNLQe+YAyGgmn+Tcy+SWgk/xmGcSotCYSfju8QEr36Fw2vnOKKMI6Hf8Bx4KCMIM31+w2cFzDXf8rHIgZ6kCLXN+x41q6rXF7KZZpFYiu0Yq3U9A0REPMnIlhU9jUR=QvlmxjdgxX1OiX6dErwKQGTDG2+xxUBN0DqSr4mD=0id1uTGEQEoqtDDFqD+1DxD===; UserName=qq_35681646; UserInfo=cbd262effcd8456a94bf003541ccc6a8; UserToken=cbd262effcd8456a94bf003541ccc6a8; UserNick=%E5%8D%83%7E%E8%91%89; AU=DCE; UN=qq_35681646; BT=1630904317563; p_uid=U010000; firstDie=1; log_Id_click=37; c_pref=https%3A//blog.csdn.net/qq_35681646; c_ref=https%3A//i.csdn.net/; c_segment=9; dc_session_id=10_1630904353724.702297; c_page_id=default; dc_tos=qyzy16; log_Id_pv=25; Hm_lvt_6bcd52f51e9b3dce32bec4a3997715ac=1630497988,1630499691,1630501187,1630904360; Hm_lpvt_6bcd52f51e9b3dce32bec4a3997715ac=1630904589; Hm_up_6bcd52f51e9b3dce32bec4a3997715ac=%7B%22islogin%22%3A%7B%22value%22%3A%221%22%2C%22scope%22%3A1%7D%2C%22isonline%22%3A%7B%22value%22%3A%221%22%2C%22scope%22%3A1%7D%2C%22isvip%22%3A%7B%22value%22%3A%220%22%2C%22scope%22%3A1%7D%2C%22uid_%22%3A%7B%22value%22%3A%22qq_35681646%22%2C%22scope%22%3A1%7D%7D; Hm_ct_6bcd52f51e9b3dce32bec4a3997715ac=6525*1*-8029438850993860835_20171017!5744*1*qq_35681646; log_Id_view=36&quot;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">request = urllib2.Request(<span class="string">&quot;https://www.csdn.net/?spm=1010.2135.3001.4476&quot;</span>,headers= header)</span><br><span class="line"></span><br><span class="line">response = urllib2.urlopen(request)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> response.read()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬虫基础篇——之请求报头的添加或修改</title>
      <link href="2021/09/04/%E7%88%AC%E8%99%AB/%E8%AF%B7%E6%B1%82%E6%8A%A5%E5%A4%B4%E7%9A%84%E6%B7%BB%E5%8A%A0%E6%88%96%E4%BF%AE%E6%94%B9/"/>
      <url>2021/09/04/%E7%88%AC%E8%99%AB/%E8%AF%B7%E6%B1%82%E6%8A%A5%E5%A4%B4%E7%9A%84%E6%B7%BB%E5%8A%A0%E6%88%96%E4%BF%AE%E6%94%B9/</url>
      
        <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment">#   作者:轩</span></span><br><span class="line"><span class="comment">#   日期:2021年9月4日</span></span><br><span class="line"><span class="comment">#   说明:User_agnet请求报头的添加或修改</span></span><br><span class="line"><span class="keyword">import</span>  urllib2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 请求报头, 字典类型</span></span><br><span class="line">headers =&#123;<span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.102 Safari/537.36&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将url和headers 封装为请求对象</span></span><br><span class="line">request = urllib2.Request(<span class="string">&quot;http://www.baidu.com/&quot;</span>,headers= headers )</span><br><span class="line"></span><br><span class="line"><span class="comment"># get_header()获取指定请求报头的值,字符串只能第一个字母大写,后面的必须全部小写</span></span><br><span class="line"><span class="built_in">print</span> request.get_header(<span class="string">&quot;User-agent&quot;</span>)</span><br><span class="line"><span class="built_in">print</span> request.get_header(<span class="string">&quot;Connection&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Add_header() 添加/修改一个请求报头</span></span><br><span class="line">request.add_header(<span class="string">&quot;Connection&quot;</span>,<span class="string">&quot;keep-alive&quot;</span>)</span><br><span class="line"><span class="built_in">print</span> request.get_header(<span class="string">&quot;Connection&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># urlopen() 发送请求对象,返回服务器的响应</span></span><br><span class="line">response = urllib2.urlopen(request)</span><br><span class="line"></span><br><span class="line"><span class="comment"># print response.read()</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬虫基础篇——之百度贴吧爬取</title>
      <link href="2021/09/04/%E7%88%AC%E8%99%AB/%E7%99%BE%E5%BA%A6%E8%B4%B4%E5%90%A7%E7%88%AC%E5%8F%96/"/>
      <url>2021/09/04/%E7%88%AC%E8%99%AB/%E7%99%BE%E5%BA%A6%E8%B4%B4%E5%90%A7%E7%88%AC%E5%8F%96/</url>
      
        <content type="html"><![CDATA[<p>百度贴吧爬虫案例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment">#   作者:轩</span></span><br><span class="line"><span class="comment">#   日期:2021年9月3日</span></span><br><span class="line"><span class="comment">#   说明: 百度贴吧爬虫</span></span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">import</span> urllib2</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_page</span>(<span class="params">url,filename</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    发送请求,返回响应</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;[INFO]正在爬取 %...&quot;</span> % filename</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        response = urllib2.urlopen(url)</span><br><span class="line">        <span class="keyword">return</span> response.read()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&quot;[ERRoR]:%s 爬取失败&quot;</span> % filename</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_page</span>(<span class="params">html,filename</span>):</span></span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;[info] 正在保存 %s ...&quot;</span>% filename</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(filename,<span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(html)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">start_work</span>(<span class="params">tieba_name,start_page,end_page</span>):</span></span><br><span class="line">    base_url =<span class="string">&quot;http://tieba.baidu.com/f?&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> page <span class="keyword">in</span> <span class="built_in">range</span>(start_page,end_page +<span class="number">1</span>):</span><br><span class="line">        pn = (page -<span class="number">1</span>) *<span class="number">50</span></span><br><span class="line"></span><br><span class="line">        dict_kw =&#123;<span class="string">&quot;kw&quot;</span>:tieba_name,<span class="string">&quot;pn&quot;</span>:pn&#125;</span><br><span class="line">        str_kw = urllib.urlencode(dict_kw)</span><br><span class="line"></span><br><span class="line">        full_url = base_url +str_kw</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span> full_url</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;\n爬取完成,谢谢使用&quot;</span></span><br><span class="line"><span class="keyword">if</span> __name__== <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    tieba_name = raw_input(<span class="string">&quot;请输入需要的爬取的贴吧名:&quot;</span>)</span><br><span class="line">    start_page = <span class="built_in">int</span>(raw_input(<span class="string">&quot;请输入爬取的起始页&quot;</span>))</span><br><span class="line">    end_page = <span class="built_in">int</span>(raw_input(<span class="string">&#x27;请输入爬取的结束页&#x27;</span>))</span><br><span class="line">    start_work(tieba_name,start_page,end_page)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬虫基础篇—之User-Agent</title>
      <link href="2021/09/03/%E7%88%AC%E8%99%AB/User-Agent/"/>
      <url>2021/09/03/%E7%88%AC%E8%99%AB/User-Agent/</url>
      
        <content type="html"><![CDATA[<p>Urllib2默认的User-Agent 头为：Python-Urllib/x.y (python-urllib/2.7)</p><p>伪装成一个合法的身份，用不同浏览器发送请求时，会有不同的User-Agnet报头</p><p>栗子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib2</span><br><span class="line">url = <span class="string">&#x27;http://www.bixuan.xyz&#x27;</span></span><br><span class="line"><span class="comment"># 添加 User-Agent报头</span></span><br><span class="line">User_agent =&#123;<span class="string">&#x27;User-Agent&#x27;</span>:<span class="string">&#x27;Mozilla/5.0(compatible;MSIE9.0;Windows NT6.1;Trident/5.0)&#x27;</span>&#125;</span><br><span class="line">request =urllib2.Request(url,headers = User_agent)</span><br><span class="line"><span class="comment"># 向服务器发送这个请求</span></span><br><span class="line">response = urllib2.urlopen(request)</span><br><span class="line">html = response.read()</span><br><span class="line"><span class="built_in">print</span> html</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬虫基础篇—之Header</title>
      <link href="2021/09/03/%E7%88%AC%E8%99%AB/Heder/"/>
      <url>2021/09/03/%E7%88%AC%E8%99%AB/Heder/</url>
      
        <content type="html"><![CDATA[<p>在发送HTTP Request 中添加特定的Header，来构造一个完整的HTTP请求消息</p><p>可以通过调用Request.add_header()添加/修改</p><p>也可以用Request.get_header()</p><p>添加一个特定header</p><p>栗子:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib2</span><br><span class="line">url =<span class="string">&quot;http://www.bixuan.xyz&quot;</span></span><br><span class="line"><span class="comment"># 添加User-Agent报头</span></span><br><span class="line">User_agent =&#123;<span class="string">&#x27;User-Agent&#x27;</span>:<span class="string">&#x27;Mozilla/5.0(compatible;MSIE9.0;Windows NT6.1;Trident/5.0)&#x27;</span>&#125;</span><br><span class="line">request = urllib2.Request(url,headers = User_agent)</span><br><span class="line"><span class="comment"># 通过调用Request.add_header()添加/修改header</span></span><br><span class="line">request.add_header(<span class="string">&#x27;Connection&#x27;</span>,<span class="string">&#x27;keep-alive&#x27;</span>)</span><br><span class="line"><span class="comment"># 通过调用Request.get_header()查看header信息</span></span><br><span class="line"><span class="comment"># Request.get_geader(head_name = &#x27;Connection&#x27;)</span></span><br><span class="line">response = urllib2.urlopen(request)</span><br><span class="line"><span class="comment"># 可以查看响应状态码</span></span><br><span class="line"><span class="built_in">print</span> response.code</span><br><span class="line">html = response.read()</span><br><span class="line"><span class="built_in">print</span> html</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">随机添加/修改User-Agent</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib2</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://www.bixuan.xyz&quot;</span></span><br><span class="line"></span><br><span class="line">ua_list = [</span><br><span class="line">    <span class="string">&quot;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/22.0.1207.1 Safari/537.1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Mozilla/5.0 (X11; CrOS i686 2268.111.0) AppleWebKit/536.11 (KHTML, like Gecko) Chrome/20.0.1132.57 Safari/536.11&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.6 (KHTML, like Gecko) Chrome/20.0.1092.0 Safari/536.6&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Mozilla/5.0 (Windows NT 6.1) AppleWebKit/536.6 (KHTML, like Gecko) Chrome/20.0.1090.0 Safari/536.6&quot;</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">user_agent = random.choice(ua_list)</span><br><span class="line"></span><br><span class="line">request = urllib2.Request(url)</span><br><span class="line"></span><br><span class="line"><span class="comment">#也可以通过调用Request.add_header() 添加/修改一个特定的header</span></span><br><span class="line">request.add_header(<span class="string">&quot;User-Agent&quot;</span>, user_agent)</span><br><span class="line"></span><br><span class="line"><span class="comment"># get_header()的字符串参数，第一个字母大写，后面的全部小写</span></span><br><span class="line">request.get_header(<span class="string">&quot;User-agent&quot;</span>)</span><br><span class="line"></span><br><span class="line">response = urllib2.urlopen(request)</span><br><span class="line"></span><br><span class="line">html = response.read()</span><br><span class="line"><span class="built_in">print</span> html</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬虫基础篇—之Get和Post方法</title>
      <link href="2021/09/03/%E7%88%AC%E8%99%AB/Get%E5%92%8CPost%E6%96%B9%E6%B3%95/"/>
      <url>2021/09/03/%E7%88%AC%E8%99%AB/Get%E5%92%8CPost%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="urllib2默认只支持HTTP-HTTPS的GET和POST方法"><a href="#urllib2默认只支持HTTP-HTTPS的GET和POST方法" class="headerlink" title="urllib2默认只支持HTTP/HTTPS的GET和POST方法"></a>urllib2默认只支持HTTP/HTTPS的<code>GET</code>和<code>POST</code>方法</h2><h3 id="URL编码转换：urllib的urlencode"><a href="#URL编码转换：urllib的urlencode" class="headerlink" title="URL编码转换：urllib的urlencode()"></a>URL编码转换：urllib的urlencode()</h3><p>Urlencode方法用来产生get查询字符串，而urllib2则没有（这是urllib和urllib2经常一起使用主要原因）</p><p>Urlencode()函数，将key：value 键值对，转换成’key = value’ 这样的字符串</p><p>urllib 的Unquote()函数</p><p>栗子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import urllib</span><br><span class="line">word = &#123;&#x27;wd&#x27;:&#x27;轩轩&#x27;&#125;</span><br><span class="line">urllib.urlencode(word)</span><br><span class="line">#运行结果：wd =%DO%F9DO%F9%DO%F9%DO%F9</span><br><span class="line">print urllib.unquote(&#x27;wd=%DO%F9%DO%F9 )</span><br><span class="line">#运行结果：wd = 轩轩</span><br></pre></td></tr></table></figure><h5 id="一般HTTP请求提交数据，需要编码成-URL编码格式，然后做为url的一部分，或者作为参数传到Request对象中。"><a href="#一般HTTP请求提交数据，需要编码成-URL编码格式，然后做为url的一部分，或者作为参数传到Request对象中。" class="headerlink" title="一般HTTP请求提交数据，需要编码成 URL编码格式，然后做为url的一部分，或者作为参数传到Request对象中。"></a>一般HTTP请求提交数据，需要编码成 URL编码格式，然后做为url的一部分，或者作为参数传到Request对象中。</h5><p>Get方式</p><p>get请求一般用于服务器获取数据 ，比如用百度搜索  轩轩: <a href="https://www.baidu.com/">https://www.baidu.com/</a>? wd = 轩轩</p><p>浏览器的url跳转成：<a href="https://www.baidu.com/s%EF%BC%9Fwd">https://www.baidu.com/s？wd</a> =轩轩</p><p><a href="http://www.baidu.com/s">http://www.baidu.com/s</a>? wd=%DO%F9%D%F9</p><p><a href="http://www.baidu.com/S">http://www.baidu.com/S</a>? 之后出现长字符串，其中就包含要查询的关键字，于是尝试用默认get方式发送请求</p><p>例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">import</span> urllib2</span><br><span class="line">url = <span class="string">&#x27;http://www.baidu.com/S&#x27;</span></span><br><span class="line">word = &#123;<span class="string">&#x27;wd&#x27;</span>:<span class="string">&#x27;轩轩&#x27;</span>&#125;</span><br><span class="line">word = urllib.urlencode(word) <span class="comment">#转换成url编码格式（字符串）</span></span><br><span class="line">newurl = url +<span class="string">&#x27;?&#x27;</span>+word  <span class="comment"># url首个分隔符就是？</span></span><br><span class="line">headers = &#123;<span class="string">&#x27;User-Agent&#x27;</span>:<span class="string">&#x27;&quot;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.103 Safari/537.36&quot;&#x27;</span>&#125;</span><br><span class="line">request = urllib2.Request(newurl, headers=headers)</span><br><span class="line"></span><br><span class="line">response = urllib2.urlopen(request)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> response.read()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Post方式：</p><p>Request请求对象的里有data参数，它就是用在POST里的，我们要传送的数据就是这个参数data，data是一个字典，里面要匹配键值对。</p><p>Post请求向服务器发送请求数据并不是在url里，Post请求一定要抓包。</p><ul><li>POST方式则不会在网址上显示所有的参数，服务器端用Request.Form获取提交的数据，在Form提交的时候。但是HTML代码里如果不指定 method 属性，则默认为GET请求，Form中提交的数据将会附加在url之后，以<code>?</code>分开与url分开。</li><li>表单数据可以作为 URL 字段（method=”get”）或者 HTTP POST （method=”post”）的方式来发送。</li><li>GET方式是直接以链接形式访问，链接中包含了所有的参数，服务器端用Request.QueryString获取变量的值。如果包含了密码的话是一种不安全的选择，不过你可以直观地看到自己提交了什么内容。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬虫基础篇—之User-Agent</title>
      <link href="2021/09/03/%E7%88%AC%E8%99%AB/%E5%A4%84%E7%90%86HTTPS%E8%AF%B7%E6%B1%82%20SSL%E8%AF%81%E4%B9%A6%E9%AA%8C%E8%AF%81/"/>
      <url>2021/09/03/%E7%88%AC%E8%99%AB/%E5%A4%84%E7%90%86HTTPS%E8%AF%B7%E6%B1%82%20SSL%E8%AF%81%E4%B9%A6%E9%AA%8C%E8%AF%81/</url>
      
        <content type="html"><![CDATA[<p>urllib2可以为HTTP请求验证SSL证书，如果网站的SSL证书是经过CA认证的，则能正常访问。</p><p>如：<a href="https://www.baidu.com/">https://www.baidu.com</a></p><p>忽略12306网站数字证书认证</p><p>栗子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib2</span><br><span class="line"><span class="keyword">import</span> ssl</span><br><span class="line"><span class="comment"># 1.表示忽略网站的数字证书认证</span></span><br><span class="line">context = ssl._create_unverified_context()</span><br><span class="line">url = <span class="string">&quot;https://www.12306.cn/mormhweb/&quot;</span></span><br><span class="line"></span><br><span class="line">headers = &#123;<span class="string">&quot;User-Agent&quot;</span>:<span class="string">&quot;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.102 Safari/537.36&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">request = urllib2.Request(url,headers= headers)</span><br><span class="line"><span class="comment"># 2.发送请求，在urlopen（）添加context</span></span><br><span class="line">response = urllib2.urlopen(request,context=context)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> response.read()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬虫基础篇—之Hanlder处理器和自定义opener</title>
      <link href="2021/09/03/%E7%88%AC%E8%99%AB/Handler%E5%A4%84%E7%90%86%E5%99%A8%E5%92%8C%E8%87%AA%E5%AE%9A%E4%B9%89Opener/"/>
      <url>2021/09/03/%E7%88%AC%E8%99%AB/Handler%E5%A4%84%E7%90%86%E5%99%A8%E5%92%8C%E8%87%AA%E5%AE%9A%E4%B9%89Opener/</url>
      
        <content type="html"><![CDATA[<p>opener 是urllib2.Oopener是模块构建好的</p><p>基本的Urlopen()方法 不支持代理、Cookie等其它的HTTP/HTTPS高级功能</p><p>要支持这些功能：</p><p>1.使用相关的Handler 处理器来创建特定功能的处理器对象</p><p>2.然后通过Urllib2.buid_open()方法使用这些处理器对象</p><p>3.使用自定义的Opener对象，调用Open()方法发送请求</p><p>如果程序里的所有请求 都是使用自定义的Opener对象定义为全局Opener，表示如果之后凡是调用Urlopen，都将使用这个Opener</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib2</span><br><span class="line">request = urllib2.Request(<span class="string">&quot;http://www.baidu.com/&quot;</span>)</span><br><span class="line"><span class="comment"># 1.创建一个能够处理Http请求 处理器对象</span></span><br><span class="line">http_handler = urllib2.HTTPHandler(debuglevel = <span class="number">1</span>)</span><br><span class="line"><span class="comment"># 2.使用处理器对象，创建opener对象</span></span><br><span class="line">opener = urllib2.build_opener(http_handler)</span><br><span class="line"></span><br><span class="line">response = opener.<span class="built_in">open</span>(request)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬虫基础篇—之ProxyHandler(代理设置)</title>
      <link href="2021/09/03/%E7%88%AC%E8%99%AB/%E7%88%AC%E8%99%AB%E5%9F%BA%E7%A1%80%E7%AF%87%E2%80%94%E4%B9%8BProxyHandler(%E4%BB%A3%E7%90%86%E8%AE%BE%E7%BD%AE)/"/>
      <url>2021/09/03/%E7%88%AC%E8%99%AB/%E7%88%AC%E8%99%AB%E5%9F%BA%E7%A1%80%E7%AF%87%E2%80%94%E4%B9%8BProxyHandler(%E4%BB%A3%E7%90%86%E8%AE%BE%E7%BD%AE)/</url>
      
        <content type="html"><![CDATA[<p>使用代理IP,   是爬虫/ 反爬虫通常最好用的第二种方式</p><p>设置代理服务器，每隔一段时间换一个代理，就算IP被禁止，可以换个IP继续爬取</p><p>urllib2中通过ProxyHandler来设置使用代理服务器</p><p>栗子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 免费代理用法</span></span><br><span class="line"><span class="comment"># proxy = &#123;&quot;http&quot;:&quot;IP:端口号&quot;&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 私密代理(需要进行账户验证) </span></span><br><span class="line"><span class="comment"># 注意：如果账号密码或者IP：端口出错，程序会报错</span></span><br><span class="line"><span class="comment"># 如果协议写错，那么不使用这个代理，相当于proxy = &#123;&#125;</span></span><br><span class="line">proxy = &#123;<span class="string">&quot;http&quot;</span>:<span class="string">&quot;账户名:密码@IP:端口号&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建一个代理处理器对象,参数就是设置的可用代理</span></span><br><span class="line">proxy_handler=urllib2.ProxyHandler(proxy)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用这个代理处理器对象,构建一个opener对象,这个opener发送请求时,就会附带这个代理</span></span><br><span class="line">opener = urllib2.build_opener(proxy_handler)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 发送请求</span></span><br><span class="line">response = opener.<span class="built_in">open</span>(<span class="string">&quot;http://wwww.baidu.com/&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> response.read()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬虫基础篇——之Urllib2模块</title>
      <link href="2021/09/03/%E7%88%AC%E8%99%AB/Urllib2%E6%A8%A1%E5%9D%97/"/>
      <url>2021/09/03/%E7%88%AC%E8%99%AB/Urllib2%E6%A8%A1%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<p>urllib2模块用于网络爬虫、抓取网页，urllib2支持Python2</p><p>Python3中Urllib2被改为Urllib.request</p><p>模块安装：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip intsall urllib2</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入模块</span></span><br><span class="line"><span class="keyword">import</span> urllib2</span><br><span class="line"><span class="comment"># urllib2.urlopen 向指定的URL发送请求，并返回服务器响应的类文件对象</span></span><br><span class="line">respnse = urllib2.urlopen(<span class="string">&#x27;http://www.bixuan.xyz&#x27;</span>)</span><br><span class="line"><span class="comment"># read()方法读取文件全部内容，返回字符串</span></span><br><span class="line">html =response.read()</span><br><span class="line"><span class="built_in">print</span> html</span><br></pre></td></tr></table></figure><p>栗子2：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入urllib2模块</span></span><br><span class="line"><span class="keyword">import</span> urllib2</span><br><span class="line"><span class="comment"># url作为Request()方法的参数，构造并返回一个Request对象</span></span><br><span class="line">request = urllib2.Request(<span class="string">&#x27;http://www.bixuan.xyz&#x27;</span>)</span><br><span class="line"><span class="comment"># request对象作为urlopen()方法参数，发送给服务器并接收响应</span></span><br><span class="line">response = urllib2.urlopen(request)</span><br><span class="line"><span class="comment"># 读取文件</span></span><br><span class="line">html = response.read()</span><br><span class="line"><span class="built_in">print</span> html</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>黑夜</title>
      <link href="2021/08/29/%E7%94%9F%E6%B4%BB/%E9%BB%91%E5%A4%9C/"/>
      <url>2021/08/29/%E7%94%9F%E6%B4%BB/%E9%BB%91%E5%A4%9C/</url>
      
        <content type="html"><![CDATA[<h2 id="夜"><a href="#夜" class="headerlink" title="夜"></a>夜</h2><p>熙熙攘攘 白昼<br>灯火通明 夜晚<br>黑夜的宁静是多么安详<br>也让浮躁喧闹的事物变得瞬间停留<br>也许是安静让人所思所想<br>也许是内心的停留<br>让黑夜活在黑的宁静，黑夜的聆听<br>让微风拂过心中一丝思索<br>也是对黑夜的尊敬与敬畏之心<br>夜是那么黑，心是那么明<br>宁听黑夜的微凉，凉过心中的执念<br>宁听心间的黑夜与思考，黑夜才是最好的向往</p><p>​                                            By:轩</p>]]></content>
      
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>进程之间通信</title>
      <link href="2021/08/29/%E6%8A%80%E6%9C%AF/%E8%BF%9B%E7%A8%8B%E4%B9%8B%E9%97%B4%E9%80%9A%E4%BF%A1/"/>
      <url>2021/08/29/%E6%8A%80%E6%9C%AF/%E8%BF%9B%E7%A8%8B%E4%B9%8B%E9%97%B4%E9%80%9A%E4%BF%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="进程之间通信"><a href="#进程之间通信" class="headerlink" title="进程之间通信"></a>进程之间通信</h2><p>进程之间通信可连接公共空间进行通信，相互获取公共信息。</p><p>Queue使用</p><p>可以使用multiprocessing模块的Queue实现多进程之间的数据传递，Queue本身是一个消息队列。</p><p>Queue()函数在内存中申请一段缓冲区</p><p>存放数据 q.put(msg)</p><p>获取数据 sg = q.get()</p><p>消息队列特点：先进先出</p><ul><li><p>   q.put()列为满时候，可能会阻塞（调用q.qut()任务等待)</p></li><li><p>   q.get()在队列为空时候，可能会阻塞（调用者等待）</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>进程</title>
      <link href="2021/08/29/%E6%8A%80%E6%9C%AF/%E8%BF%9B%E7%A8%8B/"/>
      <url>2021/08/29/%E6%8A%80%E6%9C%AF/%E8%BF%9B%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h2><p>进程就是执行程序，进程是一种任务的执行，多进程是多种任务的执行，目的主要是解决多个请求时减少请求时间与速度</p><h2 id="多进程"><a href="#多进程" class="headerlink" title="多进程"></a>多进程</h2><p>多进程是主要为了解决多个任务的请求，同时做多个事情。</p><ul><li>单核CPU实现多个任务的多进程</li><li>单核CPU实现多任务的进程就是多进程</li><li>单核CPU实现多任务就是依次执行时间片，实现时间片轮转。</li><li>时间片就是CPU执行时间分成相同的小段，每一小段称为时间片。</li></ul><h2 id="时间片"><a href="#时间片" class="headerlink" title="时间片"></a>时间片</h2><p>时间片就是CPU执行时间划分成相同的小段，每一小段称为时间片。<br>时间片轮转就是CPU轮转执行多个程序，每个程序只执行一个时间片长度，保存当时任务执行状态切换到下一次任务执行。（因为CPU计算的速度非常快，所以会以为是多进程执行）</p><p>CPU速度：CPU主频：2.5GHz<br>         1Hz=1秒10次<br>         10Hz=1秒10次<br>         1KHz=1000Hz/每秒=1秒1000次执行<br>         1MHz=1000KHz/每秒=1000*1000/每秒 1秒=10^6 (10的6次方)<br>         1GHz=1000MHz/每秒=1秒10的9次方=10亿</p><ul><li><p>并发执行：在计算机（CPU）是多个任务是顺序执行，在用户的角度上是多个任务同时执行</p></li><li><p>并行执行：在计算机角度和用户角度上都是多任务同时执行<br>（平时计算机（CPU）执行任务是并发执行）<br>（如果计算机（CPU）是4核到32核，执行任务是两个任务或小于核数的任务是并行执行）</p></li></ul><h2 id="程序与进程"><a href="#程序与进程" class="headerlink" title="程序与进程"></a>程序与进程</h2><p>编写完毕的代码，在没有运行时称为程序<br>正在运行的过程称为进程</p><ul><li><p>进程是操作系统分配系统资源基本单位，进程之间是相互独立的</p></li><li><p>进程中至少有一个线程称为主线程</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线程</title>
      <link href="2021/08/29/%E6%8A%80%E6%9C%AF/%E7%BA%BF%E7%A8%8B/"/>
      <url>2021/08/29/%E6%8A%80%E6%9C%AF/%E7%BA%BF%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬虫基础篇——之理论篇</title>
      <link href="2021/08/29/%E7%88%AC%E8%99%AB/%E7%88%AC%E8%99%AB%E5%9F%BA%E7%A1%80%E7%AF%87%E2%80%94%E4%B9%8B%E7%90%86%E8%AE%BA%E7%AF%87/"/>
      <url>2021/08/29/%E7%88%AC%E8%99%AB/%E7%88%AC%E8%99%AB%E5%9F%BA%E7%A1%80%E7%AF%87%E2%80%94%E4%B9%8B%E7%90%86%E8%AE%BA%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<p>1.网络爬虫又称网络蜘蛛、网络机器人是一种按照一定的规则，自动抓取万维网信息的程序或脚本</p><p>2.搜索引擎就是通用网络爬虫，如：google、百度（通用爬虫）     通用爬虫具有一定的局限性<br>3.网络爬虫类型：<strong>通用网络爬虫</strong>、<strong>聚集网络爬虫</strong>、<strong>分布式网络爬</strong><br>4.爬虫主要步骤：</p><ul><li><p>1.对爬取目标的 url 定义</p></li><li><p>2.对网页数据分析与协议获取对应 HTML</p></li><li><p>3.对页面进行提取 HTML 页面有价值的数据<br><img "" class="lazyload placeholder" data-original="https://img-blog.csdnimg.cn/20190422003146166.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1NjU5ODEy,size_16,color_FFFFFF,t_70" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt="爬虫流程图"></p></li></ul><ol start="5"><li> 通用爬虫需要遵守一定规则（nofollow 协议或 Robots 协议），全称是网络爬虫排除标准</li><li>通用爬虫只能抓取 HTML、PDF、word、wps、XLP、PPT、TXflash、音频、脚本程序</li><li>HTTP 协议（Hyper Text Transfer Protocl，超文本传输协议）是面的规则</li><li>HTTPS 协议（Hypertext Transfer Protocl oVer Secure Socket Laye层（安全套接层）主要用于安全传输协议，在网络传输层进行加密</li></ol><ul><li>HTTP 的端口号：80</li><li>HTTPS 的端口号：443</li></ul><ol start="9"><li>HTTP 请求与响应：浏览器发送请求等待服务器响应并返回数流程图 浏览器 发送请求数据 响应并返回数据<br><img "" class="lazyload placeholder" data-original="https://img-blog.csdnimg.cn/20190422004510653.png" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt="客户端与服务端连接流程图"></li><li>统一资源定位符 URL:如 <a href="http://www.baidu.com:8080/a">http://www.baidu.com:8080/a</a><br><img "" class="lazyload placeholder" data-original="https://img-blog.csdnimg.cn/2019042200484918.png" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt="统一资源定位符"></li></ol><p>11.客户端 HTTP 请求：</p><ul><li>浏览器发送一个 HTTP 请求到服务器</li><li>请求格式: 请求行、请求头、空行.请求数据</li><li>GET： http:// <a href="http://www.baidu.com/HTTP/1.1">www.baidu.com/HTTP/1.1</a></li><li>Host:：<a href="http://www.baidu.com/">www.baidu.com</a></li><li>User-Aget: Mozilla/chrome</li><li>Cookie：</li></ul><p>12.HTTP 请求主要分为 get 和 postGet 请求：</p><ul><li>Get请求：是从服务器上获取页面信息</li><li>Post 请求：是向服务器提交数据并获取页面信息</li><li><strong>Get 请求参数都显示在 URL 上，服务器根据请求 URL 的参数产生响的一部分</strong></li><li><strong>Post 请求参数在请求体中，消息长度没有限制而且隐式方式进行在 URL 中，而是在请求体中因此 Get 请求方式不安全，而 Post 请求方式相对来说比较安全</strong></li></ul><p>13.请求报头</p><ul><li>Host（主机和端口号）</li><li>UPgrade-lnsecure-Reuqusts(升级为 HTTPS 请求)</li><li>User-agent(浏览器名称)</li><li>Accept(传输文件类型)</li><li>Referer(页面跳转来源)</li><li>Accept-Encoding(文件编解码格式)</li><li>Accept-Language(语言类型)</li><li>Accept-charset(字符编码)</li><li>CookieContent-Type(Post 数据类型)</li><li>服务端 HTTP 响应</li></ul><p>14.响应报头</p><ul><li>Cache-Control:must-revalidate,no-cache,Private</li><li>Connection:Keep-alive</li><li>Content-Encoding:gzip</li><li>Content-Type:text/html;charset = utf-8</li><li>Date:sun,21 sep 2017.01:06.21 GMT<br>服务器端发送资源时的时间，不同时区在相互请求资源时间混乱，http 协议中发送时间都<br>是 GMT</li><li>Server : Tengine/1.4.6<br>服务器和相对应的版本，只是告诉浏览器服务器的信息</li><li>Transfer-Encoding:chunked</li></ul><ol start="15"><li>响应状态码：</li></ol><ul><li>200:访问成功正常</li><li>404:访问失败，没有找到请求信息</li><li>500:服务器端出现错误，请求未完成</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>漫步行者</title>
      <link href="2021/08/29/%E7%94%9F%E6%B4%BB/%E6%BC%AB%E6%AD%A5%E8%A1%8C%E8%80%85/"/>
      <url>2021/08/29/%E7%94%9F%E6%B4%BB/%E6%BC%AB%E6%AD%A5%E8%A1%8C%E8%80%85/</url>
      
        <content type="html"><![CDATA[<h2 id="漫步行者"><a href="#漫步行者" class="headerlink" title="漫步行者"></a>漫步行者</h2><p>我行黑夜里的雨步<br>黑夜里迷失自我<br>是我拥有了黑夜<br>还是黑夜拥有了我<br>我们只是黑夜里的独行者<br>雨点是黑夜里的见证者<br>滴答雨滴划过黑夜<br>点点滴滴划过足迹<br>偶然见证我们的事迹<br>待雨滴消散时的彩虹<br>醒时是泡沫的彩虹梦<br>时光匆匆 泡沫蒸发的岁月<br>时间曼曼 已是无声的告别<br>岁月无期 已成残缺的记忆</p><p>​                                By:轩</p>]]></content>
      
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器学习基础</title>
      <link href="2021/08/29/%E6%8A%80%E6%9C%AF/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
      <url>2021/08/29/%E6%8A%80%E6%9C%AF/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="人工智能"><a href="#人工智能" class="headerlink" title="人工智能"></a>人工智能</h2><p>人工智能之父，艾伦.图灵。图灵测试是1950年进行的一项科研测试。</p><p>马文·李·闵斯基（英语：Marvin Lee Minsky，1927年8月9日－2016年1月24日），科学家，专长于认知科学与人工智能领域，麻省理工学院人工智能实验室的创始人之一，著有几部人工智能和哲学方面的作品。1969年，因为在人工智能领域的贡献，获得图灵奖。</p><p>机器学习框架:</p><ul><li>Tensorflow</li><li>PyToRCH</li><li>theano</li><li>Caffe2</li><li>CHaine</li></ul><p>数据特征处理分析与归一化</p><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">from sklearn.metrics import silhouette_score</span><br><span class="line">from sklearn.cluster import KMeans</span><br><span class="line"></span><br><span class="line">def kmeans():</span><br><span class="line">    </span><br><span class="line">    # 加载数据</span><br><span class="line"></span><br><span class="line">    ld = load_digits()</span><br><span class="line"></span><br><span class="line">    print(ld.target[:20])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    km = KMeans(n_clusters=810)</span><br><span class="line"></span><br><span class="line">    km.fit_transform(ld.data)</span><br><span class="line"></span><br><span class="line">    print(km.labels_[:20])</span><br><span class="line"></span><br><span class="line">    print(silhouette_score(ld.data,km.labels_))</span><br><span class="line"></span><br><span class="line">    return None</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__==&quot;__main__&quot;:</span><br><span class="line">    kmeans()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>未定义的念</title>
      <link href="2021/08/29/%E7%94%9F%E6%B4%BB/%E6%9C%AA%E5%AE%9A%E4%B9%89%E7%9A%84%E5%BF%B5/"/>
      <url>2021/08/29/%E7%94%9F%E6%B4%BB/%E6%9C%AA%E5%AE%9A%E4%B9%89%E7%9A%84%E5%BF%B5/</url>
      
        <content type="html"><![CDATA[<h2 id="未定义的念"><a href="#未定义的念" class="headerlink" title="未定义的念"></a>未定义的念</h2><p>谢谢你的每次背影与触手可及的靠近<br>你说我们一起很舒适<br>你的早，你的幼稚<br>让我模糊，判若两人<br>也许是时间的阻隔<br>也许是心灵的阻隔<br>你我对视一份迷<br>同时同路同眼眸<br>曾让内心喜悦的你<br>曾让攻击心房的你<br>相册存储相片反复渗透<br>一个手势，一种眼眸<br>一种状态，一种请求<br>等待响应的心灵与数据</p><p>​                          By:轩</p>]]></content>
      
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>彩虹弧度</title>
      <link href="2021/08/29/%E7%94%9F%E6%B4%BB/%E5%BD%A9%E8%99%B9%E5%BC%A7%E5%BA%A6/"/>
      <url>2021/08/29/%E7%94%9F%E6%B4%BB/%E5%BD%A9%E8%99%B9%E5%BC%A7%E5%BA%A6/</url>
      
        <content type="html"><![CDATA[<h2 id="彩虹弧度"><a href="#彩虹弧度" class="headerlink" title="彩虹弧度"></a>彩虹弧度</h2><p>背影云彩之间的花朵唯美而触手可及<br>舒服的船只游过温暖的心房</p><p>待续。。。。。。</p><p>​       By:轩</p>]]></content>
      
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>互斥和互斥锁</title>
      <link href="2021/08/29/%E6%8A%80%E6%9C%AF/%E4%BA%92%E6%96%A5%E5%92%8C%E4%BA%92%E6%96%A5%E9%94%81/"/>
      <url>2021/08/29/%E6%8A%80%E6%9C%AF/%E4%BA%92%E6%96%A5%E5%92%8C%E4%BA%92%E6%96%A5%E9%94%81/</url>
      
        <content type="html"><![CDATA[<h2 id="互斥和互斥锁"><a href="#互斥和互斥锁" class="headerlink" title="互斥和互斥锁"></a>互斥和互斥锁</h2><p>线程的互斥：要求一次一个线程的执行访问资源</p><p>互斥锁：每个线程访问公共资源之前都要先申请锁。如果申请到锁，可以访问公共资源，当资源访问完毕，释放锁</p><p>如果没有申请到锁，线程需要停止等待，直到获得锁。</p><p>线程锁是全局变量访问</p><p>申请锁：访问资源之前<br>释放锁：访问资源之后结束</p><p>锁是访问资源过程加锁</p><p>锁的优缺点</p><p>锁的优点：确保资源访问的正确性执行</p><p>锁的缺点：阻止多个线程并发执行，降低执行效率。</p><pre><code>      由于多线程里存在多个锁，不同线程有不同的锁，并且不释放锁会造成死锁。</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>了解我</title>
      <link href="2021/08/29/%E7%94%9F%E6%B4%BB/%E4%BA%86%E8%A7%A3%E6%88%91/"/>
      <url>2021/08/29/%E7%94%9F%E6%B4%BB/%E4%BA%86%E8%A7%A3%E6%88%91/</url>
      
        <content type="html"><![CDATA[<h2 id="博客的初心"><a href="#博客的初心" class="headerlink" title="博客的初心"></a>博客的初心</h2><p>希望记录平时遇到的问题和知识或所思所想！</p><ul><li>其实一直以来喜欢瞎折腾;(Ps):其实我弄水晶头、拉网线、配 IP、装系统、给手机贴膜的技术还算可以的，其它都不行。</li></ul><h2 id="兴趣"><a href="#兴趣" class="headerlink" title="兴趣"></a>兴趣</h2><ul><li>运动：跑步、溜冰、羽毛球都喜欢</li><li>摄影：任何时候都有美好的一瞬间</li><li>唱歌：五音不全的我也能成为麦霸</li><li>哲学：人生是一场无止境的哲学</li><li>音乐：许嵩、轻音乐</li><li>旅行：遇到不一样的人和风景</li><li>读书：历史，专业书籍</li><li>动漫：哆啦A梦、纳米核心、全职高手、末世觉醒等等</li><li>分享：喜欢把自己的经验分享给大家</li><li>DIY：一切皆可创造<h2 id="欢迎留言"><a href="#欢迎留言" class="headerlink" title="欢迎留言"></a>欢迎留言</h2>曾就职于朵莓网络，实习生一枚。如果有什么建议和想法，都可以和我留言，就算留言未必有回响————By:轩</li><li>电子邮箱：<a href="mailto:&#71;&#101;&#x72;&#x61;&#84;&#x65;&#x61;&#x72;&#64;&#103;&#109;&#x61;&#x69;&#108;&#46;&#x63;&#x6f;&#x6d;">&#71;&#101;&#x72;&#x61;&#84;&#x65;&#x61;&#x72;&#64;&#103;&#109;&#x61;&#x69;&#108;&#46;&#x63;&#x6f;&#x6d;</a></li><li>QQ：843904416</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows系统下的进程或跨平台的进程</title>
      <link href="2021/08/29/%E6%8A%80%E6%9C%AF/Windows%E7%B3%BB%E7%BB%9F%E4%B8%8B%E7%9A%84%E8%BF%9B%E7%A8%8B%E6%88%96%E8%B7%A8%E5%B9%B3%E5%8F%B0%E7%9A%84%E8%BF%9B%E7%A8%8B/"/>
      <url>2021/08/29/%E6%8A%80%E6%9C%AF/Windows%E7%B3%BB%E7%BB%9F%E4%B8%8B%E7%9A%84%E8%BF%9B%E7%A8%8B%E6%88%96%E8%B7%A8%E5%B9%B3%E5%8F%B0%E7%9A%84%E8%BF%9B%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>由于Python是跨平台的，Unix/Linux用fork函数。但是windows系统下没有fork函数，所以为支持多平台进程提供multiProcessing模块。</p><h2 id="multiProcessing模块"><a href="#multiProcessing模块" class="headerlink" title="multiProcessing模块"></a>multiProcessing模块</h2><p>multiProcessing模块提供一个Process类代表进程对象</p><p>栗子：<br> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">from multiProcessing import Process</span><br><span class="line"></span><br><span class="line">def   task():</span><br><span class="line"></span><br><span class="line"> for i in range(3):</span><br><span class="line"></span><br><span class="line"> print(&#x27;子进程Pid = %d  i =%d&#x27; %(os.getpid(),i))</span><br><span class="line"></span><br><span class="line"> time.Sleep(1)</span><br><span class="line"></span><br><span class="line">def  main():</span><br><span class="line"></span><br><span class="line"> p = process(target = task)    #创建Process对象，指定Process进程对象</span><br><span class="line"></span><br><span class="line"> p.start()</span><br><span class="line"></span><br><span class="line"> print(p.is_alive())</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python的闭包</title>
      <link href="2021/08/29/%E6%8A%80%E6%9C%AF/Python%E7%9A%84%E9%97%AD%E5%8C%85/"/>
      <url>2021/08/29/%E6%8A%80%E6%9C%AF/Python%E7%9A%84%E9%97%AD%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<p>在函数内部再定义一个函数，并且这个函数用到外边的函数的变量，那么将这个函数以及用到的一些变量称为闭包</p><p>例子1:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">def test(A):</span><br><span class="line">    def test_in(A_in):</span><br><span class="line">        print(&#x27;in test_in函数,A_in is%d&#x27; %A_in)</span><br><span class="line">        return A+A_in</span><br><span class="line"></span><br><span class="line">return A_in     #返回其实就是闭包结果</span><br><span class="line">ret = test(20)</span><br><span class="line">print(ret(100))</span><br><span class="line">print(ret(200))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>例子2:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">def test A(a,b):</span><br><span class="line">    def test(x):</span><br><span class="line">        return a*x+b</span><br><span class="line">    return test</span><br><span class="line">test1 = test_A(1,1)</span><br><span class="line">test2 = test_A(4,5)</span><br><span class="line">print(test1(5))</span><br><span class="line">print(test2(5))</span><br></pre></td></tr></table></figure><p>函数test与变量a,b构成闭包，创建闭包时通过，test_A的参数a,b 说明两个变量的取值，确定函数最终形成（y =x + 1 和 y =4x + 5）只需要变换参数a,b 就可以获得不同的直线表达函数。</p><p>闭包也具有提高代码可复用性的作用。</p><p>如果没有闭包，需要更多的参数传递，也减少代码可移植性，由于闭包引用外部函数的局部变量，则外部函数的局部变量没有及时释放，消耗内存。<br>函数里嵌套定义函数，并且内层函数使用外层函数的变量或参数，外层函数要返回这个内层函数。<br>内层函数及使用外层函数的变量或参数形成一个闭包。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python的迭代器</title>
      <link href="2021/08/29/%E6%8A%80%E6%9C%AF/Python%E7%9A%84%E8%BF%AD%E4%BB%A3%E5%99%A8/"/>
      <url>2021/08/29/%E6%8A%80%E6%9C%AF/Python%E7%9A%84%E8%BF%AD%E4%BB%A3%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>迭代器是访问集合元素的一种方式。迭代器对像从集合的第一个访问元素开始，直到所有的元素被访问结束。</p><p>作用：用于记录当前访问的位置，提供下一个元素。<br>特点：1.访问者不需要关心迭代器内部的结构，仅需要通过next()方法不断去获取下一个内容<br>      2.不能随机访问集合中的某个值，只能从头到尾依次访问<br>      3.访问到一半时不能往回退<br>      4.便于循环比较大的数据集合，节省内存</p><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">a = __iter__([1,2,3,4])</span><br><span class="line">a.__next__()</span><br><span class="line">结果：1</span><br><span class="line">a.__next__()</span><br><span class="line">结果: 2</span><br><span class="line">a.__next__()</span><br><span class="line">结果：3</span><br><span class="line">a.__next__()</span><br><span class="line">结果：4</span><br><span class="line">a.__next__() #出现异常</span><br><span class="line">结果：出现异常</span><br></pre></td></tr></table></figure><p>list、tuple、str等数据类型可以使用for…in 循环进行顺序依次提取元素的遍历，也称为迭代器</p><p>判断是否可迭代：isinstance()<br>__iter__向外提供迭代<br>__next()__和__iter()_<em>函数作用：<br>next()获取数据，前数据不存在时出现异常<br>iter()获取迭代器对象中的迭代对象，返回迭代器<br>使用_next</em>()函数时候就是调用迭代器的对象__next__方法<br>区别：Python3:<strong>next</strong>,Python2:next<br>函数_next()_和_iter()_与next和iter作用相同，有下划线是魔法方法</p>]]></content>
      
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python的装饰器</title>
      <link href="2021/08/29/%E6%8A%80%E6%9C%AF/Python%E7%9A%84%E8%A3%85%E9%A5%B0%E5%99%A8/"/>
      <url>2021/08/29/%E6%8A%80%E6%9C%AF/Python%E7%9A%84%E8%A3%85%E9%A5%B0%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>装饰器的作用就是为已经存在的对象添加其它功能。<br>使用装饰器可以在函数执行前和执行后添加相应操作。<br>装饰器是函数，只是函数可以具有特殊含义，装饰器用来装饰函数或类，使用装饰器可以在函数执行前和执行后添加相应操作。</p><p>装饰器常用于插入日志，性能测试，事物处理验证<br>例子1：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">def A(test):</span><br><span class="line">    def B():</span><br><span class="line">        return test()</span><br><span class="line">    return B</span><br><span class="line"></span><br><span class="line">@ A</span><br><span class="line">def test1():</span><br><span class="line">    print(&#x27;功能1&#x27;)</span><br><span class="line">@A</span><br><span class="line">def test2():</span><br><span class="line">    print(&#x27;功能2&#x27;)</span><br></pre></td></tr></table></figure><p>1.自动执行A函数并且将下面的函数名test1当作参数传递</p><p>2.将A函数的返回值，重复赋值test1</p><p>装饰器就是@调用封装名</p><p>例子2,无参数的函数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">from time import ctime,sleep</span><br><span class="line">def tiemfun(func)</span><br><span class="line">    def wrappendfunc():</span><br><span class="line">        print(&#x27;%s called at %s&#x27;%(func.__name__,ctime()))</span><br><span class="line">        func()</span><br><span class="line">   return wrappendfunc</span><br><span class="line">@timefunc</span><br><span class="line">def foo():</span><br><span class="line">print(&#x27;打印&#x27;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python的生成器</title>
      <link href="2021/08/29/%E6%8A%80%E6%9C%AF/Python%E7%9A%84%E7%94%9F%E6%88%90%E5%99%A8/"/>
      <url>2021/08/29/%E6%8A%80%E6%9C%AF/Python%E7%9A%84%E7%94%9F%E6%88%90%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>生成器（yield函数）</p><h1 id="yield介绍"><a href="#yield介绍" class="headerlink" title="yield介绍"></a>yield介绍</h1><p>带有yield的函数在Python中称为生成器（generator）<br>生成斐波那契（Fibonacci）数列是一个非常简单的递归数列，除第一个和第二个数外，任意一个数都可由前两个数相加得到。</p><p>列子1：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">def A(max):</span><br><span class="line">    a,b,c = 0,0,1</span><br><span class="line">    while a &lt; max:</span><br><span class="line">        print(C)</span><br><span class="line">        b,c = c,b+c</span><br><span class="line">        a = a +1</span><br><span class="line">a(5)</span><br><span class="line"></span><br><span class="line">结果：1</span><br><span class="line">      1</span><br><span class="line">      2</span><br><span class="line">      3</span><br><span class="line">      5</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>直接在A函数中用print导致函数可复用性较差，因为A函数返回None,其它函数无法获得函数生成的数列。要提高A函数的可复用性，需返回一个列表（list）</p><p>列子2：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">def A(max):</span><br><span class="line">    a,b,c = 0,0,1</span><br><span class="line">    L = []</span><br><span class="line">    while a &lt; max:</span><br><span class="line">        L.append(c)</span><br><span class="line">        b,c = c, b+c</span><br><span class="line">        a = a + 1</span><br><span class="line">    return L</span><br><span class="line"></span><br><span class="line">结果： for a in A(5):</span><br><span class="line">        1</span><br><span class="line">        1</span><br><span class="line">        2</span><br><span class="line">        3</span><br><span class="line">        5</span><br></pre></td></tr></table></figure><p>函数在运行中占用的内存随着参数增大而增大，如果要控制内存占用，不要用列表保存中间结果，而是通过iterable对象来迭代</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">        for i in range(1000)： #会导致生成一个1000个元素的列表</span><br><span class="line">            pass                </span><br><span class="line">        yield</span><br><span class="line"></span><br><span class="line">        def A(max)：</span><br><span class="line">            a,b,c = 0,0,1</span><br><span class="line">            while a &lt; max:</span><br><span class="line">                yield ｃ　＃　打印Ｃ</span><br><span class="line">                b,c = c,b + c</span><br><span class="line">                a = a + 1</span><br><span class="line"></span><br><span class="line">结果：for a in A(5):</span><br><span class="line">        print(a)</span><br><span class="line">      1</span><br><span class="line">      1</span><br><span class="line">      2</span><br><span class="line">      3</span><br><span class="line">      5</span><br></pre></td></tr></table></figure><p>yiled作用就是把一个函数变成生成器，带有yield函数不再是普通函数，解释会认为是一个生成器，调用A(5)不会执行A函数，而是返回一个生成器对象。</p><h1 id="生成器的唤醒（next-函数和send-函数）"><a href="#生成器的唤醒（next-函数和send-函数）" class="headerlink" title="生成器的唤醒（next()函数和send()函数）"></a>生成器的唤醒（next()函数和send()函数）</h1><p>例子1：使用send()函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">def A():</span><br><span class="line">    i = 0</span><br><span class="line">    while i &lt; 5:</span><br><span class="line">        t = yield i</span><br><span class="line">        print(t)</span><br><span class="line">        i += 1</span><br><span class="line"></span><br><span class="line">    f = A()</span><br><span class="line">    next(f)</span><br><span class="line">    0</span><br><span class="line">    f.send(&#x27;111&#x27;)</span><br><span class="line">111</span><br><span class="line">    1</span><br><span class="line">    next(f)</span><br><span class="line">None</span><br><span class="line">    2</span><br><span class="line">    f.send(&#x27;000&#x27;)</span><br><span class="line">000</span><br><span class="line">    3</span><br></pre></td></tr></table></figure><p>使用send（）函数可以在唤醒同时断点处传入一个附加数据执行到yield时，A函数作用暂时保存，返回i的值，t接收send发送的值<br>例子2：使用next函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">    f = A()</span><br><span class="line">    next(f)</span><br><span class="line">    0</span><br><span class="line">    next(f)</span><br><span class="line">None</span><br><span class="line">     1</span><br><span class="line">    next(f)</span><br><span class="line">None</span><br><span class="line">    2</span><br><span class="line">    next(f)</span><br><span class="line">None</span><br><span class="line">    3</span><br><span class="line">    next(f)</span><br><span class="line">None</span><br><span class="line">    4</span><br><span class="line">    next(f)</span><br><span class="line">None            #超出范围</span><br></pre></td></tr></table></figure><p>例子3：使用__next__()函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">    f = A</span><br><span class="line">    f.__next__()</span><br><span class="line">    0</span><br><span class="line">    f.__next__()</span><br><span class="line">None</span><br><span class="line">    1</span><br><span class="line">    f.__next__()</span><br><span class="line">None </span><br><span class="line">    2</span><br><span class="line">    f.__next__()</span><br><span class="line">None</span><br><span class="line">    3</span><br><span class="line">    f.__next__()</span><br><span class="line">None</span><br><span class="line">    4</span><br><span class="line">    f.__next__() #超出比较，报出异常</span><br><span class="line">None</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL数据库</title>
      <link href="2021/08/29/%E6%8A%80%E6%9C%AF/MySQL/"/>
      <url>2021/08/29/%E6%8A%80%E6%9C%AF/MySQL/</url>
      
        <content type="html"><![CDATA[<h2 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h2><p>MySQL数据库是一个关系型数据库<br>MySQL数据库特点</p><ul><li>使用C和C++编写，并使用多种编译器进行测试，保证可移植性</li><li>支持多种系统：如Linux、Windows、MacOS、AIX</li><li>为多种编程语言提供API、如C、C++、php、Java、Python、Ruby</li><li>支持多线程，充分利用CPU资源</li><li>支持SQL查询语句优化，有效提高查询速度</li><li>提供多语言编码如GB2312、UTF-8</li><li>支持多种存储</li><li>支持大型数据、能处理拥有上千万条记录</li><li>提供用于管理、优化、检查数据的管理工具</li><li>MySQL数据库分为社区版和商业版，体积小、速度快、成本低尤其是开源代码</li><li>MySQL使用标准sql数据语言形式</li><li>复制全局事物标识</li><li>复制无崩溃从机</li></ul><h2 id="服务端（server）"><a href="#服务端（server）" class="headerlink" title="服务端（server）"></a>服务端（server）</h2><ul><li><p>开启服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service mysql start</span><br></pre></td></tr></table></figure></li><li><p>停止服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service mysql stop</span><br></pre></td></tr></table></figure></li><li><p>重启服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service mysql restart</span><br></pre></td></tr></table></figure></li></ul><h2 id="数据库操作命令"><a href="#数据库操作命令" class="headerlink" title="数据库操作命令"></a>数据库操作命令</h2><ul><li><p>Mysql安装命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install mysql-server</span><br></pre></td></tr></table></figure></li><li><p>mysql启动运行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service mysql start</span><br></pre></td></tr></table></figure></li><li><p>查看mysql是否运行进程</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps ajx|grep mysql</span><br></pre></td></tr></table></figure></li><li><p>Mysql数据库连接登陆</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u 用户名 -p 密码</span><br></pre></td></tr></table></figure></li><li><p>mysql数据库退出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">quit或者exit或者ctrl+d</span><br></pre></td></tr></table></figure></li><li><p>查看mysql版本和目前时间</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select version()；</span><br><span class="line">select now()；</span><br></pre></td></tr></table></figure></li><li><p>修改输入提示符</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Prompt &gt;&gt;&gt;</span><br></pre></td></tr></table></figure></li><li><p>查看Mysql所有数据库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show databases;</span><br></pre></td></tr></table></figure></li><li><p>使用数据库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user 数据库名称;</span><br></pre></td></tr></table></figure></li><li><p>查看当前使用的数据库名称</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select database();</span><br></pre></td></tr></table></figure></li><li><p>创建数据库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create database 数据库名 chareset = utf8;</span><br></pre></td></tr></table></figure></li><li><p>删除数据库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop database 数据库名</span><br></pre></td></tr></table></figure></li></ul><h2 id="数据表操作"><a href="#数据表操作" class="headerlink" title="数据表操作"></a>数据表操作</h2><ul><li><p>查看当前数据库中所有表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show tables;</span><br></pre></td></tr></table></figure></li><li><p>查看表结构</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">desc  表名;</span><br><span class="line">desc  classes;</span><br></pre></td></tr></table></figure></li><li><p>创建表并表单自动增长(auto_increment)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">create table 表名(</span><br><span class="line">id int unsigned primar key not null auto_increment</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li><li><p>修改表数据——添加字段</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table 表名 add 列名 类型;</span><br></pre></td></tr></table></figure></li><li><p>修改表数据——重命名修改(change)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table 表名 change 原名  新名 类型及约束;</span><br></pre></td></tr></table></figure></li><li><p>修改表数据——修改字段——不重命名版（modify）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table 表名 modify 列名 类型及约束;</span><br></pre></td></tr></table></figure></li><li><p>删除字段——修改表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter  table  表名  drop  列名;</span><br></pre></td></tr></table></figure></li><li><p>删除数据表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop table  表名;</span><br></pre></td></tr></table></figure></li><li><p>查看表的创建</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show create  table  表名;</span><br></pre></td></tr></table></figure></li></ul><h2 id="数据操作"><a href="#数据操作" class="headerlink" title="数据操作"></a>数据操作</h2><ul><li><p>数据增加<br>格式：Insert [into] 表名 values(…);<br>全列插入：insert into 表名 values(0，”小明”,1,”汉族”,”2010-1-1”);<br>指定列插入：insert into 表名(name,age,gender)values(“小明”,”18”,”4”);<br>批量插入: insert into 表名(列1，…) values(值1,…),(值1,…)…;</p></li><li><p>数据修改<br>格式：updata 表名 set 列1=值1，列2=值2 … where条件;<br>栗子：updata A1 set  L1 = 0, L2=”值” where id = 5;</p></li><li><p>数据删除<br>格式：delete from 表名 where 条件判断<br>栗子：delete from  A1 where id =5;</p></li></ul><p>注：逻辑删除本质就是修改操作<br>updata A1 set 列1= 1 where id =1;</p><p>提示：如果数据删除时不加where条件判断会删除表里的所有数据</p><ul><li><p>数据备份<br>mysqldump -u用户名   -p数据库名 &gt; 新文件.SQL</p></li><li><p>数据恢复<br>mysql -u用户名 -p新数据库名 &lt; 文件名.SQL</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL数据库</title>
      <link href="2021/08/29/%E6%8A%80%E6%9C%AF/MongoDB/"/>
      <url>2021/08/29/%E6%8A%80%E6%9C%AF/MongoDB/</url>
      
        <content type="html"><![CDATA[<h2 id="MongoDB数据库"><a href="#MongoDB数据库" class="headerlink" title="MongoDB数据库"></a>MongoDB数据库</h2><p>MongoDB是一个基于分布式文件，存储的NOSQL数据库，是面向集合的存储，复制和高可用性。支持服务器之间的数据库复制。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">启动：sudo service mongod start</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux系统下的进程</title>
      <link href="2021/08/29/%E6%8A%80%E6%9C%AF/Linux%E7%B3%BB%E7%BB%9F%E4%B8%8B%E7%9A%84%E8%BF%9B%E7%A8%8B%E5%87%BD%E6%95%B0/"/>
      <url>2021/08/29/%E6%8A%80%E6%9C%AF/Linux%E7%B3%BB%E7%BB%9F%E4%B8%8B%E7%9A%84%E8%BF%9B%E7%A8%8B%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p>fork()函数</p><p>如用fork函数，导入Python的OS模块调用fork,创建进程<br>栗子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import os</span><br><span class="line"></span><br><span class="line">A = os.fork()</span><br><span class="line">print(&#x27;fork返回值：%d&#x27; %A) </span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p>Linux和Unix系统创建进程会父进程产生子进程。</p></li><li><p>Linux系统查看进程命令:PS -ef | head -3</p></li><li><p>PID是子进程       PPID是父进程</p></li><li><p>get pid函数与get ppid函数</p></li><li><p>os.getpid()是获得当前进程Pid</p></li><li><p>os.getppid()是获得当前进程的父进程PPid</p></li></ul><h2 id="fork函数原理"><a href="#fork函数原理" class="headerlink" title="fork函数原理:"></a>fork函数原理:</h2><p>   fork函数是通过复制父进程产生子进程</p><p>注：fork函数在父进程中返回新进程（子进程）的pid<br>    fork函数在子进程中返回特殊值0</p><p>pid大于0是父进程，pid等于0是子进程</p><p>当前进程产生新的进程，进程是在迭代的</p><p>父进程产生子进程之后，那个进程先运行由操作系统调度</p><h2 id="进程的全局变量"><a href="#进程的全局变量" class="headerlink" title="进程的全局变量"></a>进程的全局变量</h2><p>操作系统在进程逻辑上是隔离的，不同进程之间全局变量不能共享的（系统安全性，如支付宝与QQ进程之间通信是不安全的进程与进程之间不能直接通信）</p><p>前台进程与后台进程</p><p>前台进程可以接收键盘输入</p><p>后台进程就是父进程销毁子进程变成后台进程（变后台进程时提示符直接打印出来，子进程接着提示符往后打印出来）</p>]]></content>
      
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kafka</title>
      <link href="2021/08/29/%E6%8A%80%E6%9C%AF/kafka/"/>
      <url>2021/08/29/%E6%8A%80%E6%9C%AF/kafka/</url>
      
        <content type="html"><![CDATA[<h2 id="Kafka"><a href="#Kafka" class="headerlink" title="Kafka"></a>Kafka</h2><p>Kafka是最初由Linkedin公司开发，是一个分布式、分区的、多副本的、多订阅者，基于zookeeper协调的分布式日志系统（也可以当做MQ系统），常见可以用于web/nginx日志、访问日志，消息服务等等，Linkedin于2010年贡献给了Apache基金会并成为顶级开源项目。</p><p>主要应用场景是：日志收集系统和消息系统。<br>Kafka主要设计目标：</p><ul><li>以时间复杂度为O(1)的方式提供消息持久化能力，即使对TB级以上数据也能保证常数时间的访问性能。</li><li>高吞吐率。即使在非常廉价的商用机器上也能做到单机支持每秒100K条消息的传输。</li><li>支持Kafka Server间的消息分区，及分布式消费，同时保证每个partition内的消息顺序传输。</li><li>同时支持离线数据处理和实时数据处理。</li><li>Scale out:支持在线水平扩展</li></ul><h2 id="消息系统"><a href="#消息系统" class="headerlink" title="消息系统"></a>消息系统</h2><p>一个消息系统负责将数据从一个应用传输到另一个应用，应用只需要关注于数据本身。这样有效解决数据传递，无需关注数据是如果传输的。分布式消息传输基于可靠消息队列，在客户端和消息系统之间异步传输数据。</p><p>两种数据传输模式：</p><ul><li>点对点传输</li><li>发布——订阅模式传输</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello</title>
      <link href="2021/08/29/%E7%94%9F%E6%B4%BB/hello/"/>
      <url>2021/08/29/%E7%94%9F%E6%B4%BB/hello/</url>
      
        <content type="html"><![CDATA[<p>大家好！欢迎来到GeraTear的Blog。笔者电子邮箱:<a href="mailto:&#71;&#x65;&#114;&#x61;&#x74;&#101;&#97;&#114;&#64;&#x67;&#109;&#x61;&#x69;&#x6c;&#x2e;&#x63;&#x6f;&#109;">&#71;&#x65;&#114;&#x61;&#x74;&#101;&#97;&#114;&#64;&#x67;&#109;&#x61;&#x69;&#x6c;&#x2e;&#x63;&#x6f;&#109;</a> ,欢迎一起交流与成长！</p><h2 id="Hello"><a href="#Hello" class="headerlink" title="Hello"></a>Hello</h2><p>——————如果说人生是自我编写的程序<br>——————那么青春就是其中意味深长的代码<br>——————我们敲击着人生的轨迹<br>——————我们尝试着不断自我调试与优化<br>——————无论运行结果如何都将是人生风景</p><p>By:轩</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>未定义</title>
      <link href="2021/07/12/%E7%94%9F%E6%B4%BB/%E6%9C%AA%E5%AE%9A%E4%B9%89/"/>
      <url>2021/07/12/%E7%94%9F%E6%B4%BB/%E6%9C%AA%E5%AE%9A%E4%B9%89/</url>
      
        <content type="html"><![CDATA[<p><strong>自定义</strong></p><p>感谢你的分享的音乐，让我成长很多，也感谢认识你</p><p>虽然相见短暂，但是让我明白相见恨晚意义，如此相见不如怀恋</p><p>虽然知道你的联系方式，但是并不知道如何联系你，不想打扰你更多的是不知如何开口的尴尬</p><p>你的努力、奋斗、坚持、不抛弃、不放弃、一切皆有可能。</p><p>让我有所惭愧，我不知如何行动。我并未遗忘，只是不知如何回应。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django框架之项目创建</title>
      <link href="2021/07/09/web%E5%BC%80%E5%8F%91%E4%B9%8BDjango%E6%A1%86%E6%9E%B6/Django%E6%A1%86%E6%9E%B6%E4%B9%8B%E9%A1%B9%E7%9B%AE%E5%88%9B%E5%BB%BA/"/>
      <url>2021/07/09/web%E5%BC%80%E5%8F%91%E4%B9%8BDjango%E6%A1%86%E6%9E%B6/Django%E6%A1%86%E6%9E%B6%E4%B9%8B%E9%A1%B9%E7%9B%AE%E5%88%9B%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django框架之基础</title>
      <link href="2021/07/09/web%E5%BC%80%E5%8F%91%E4%B9%8BDjango%E6%A1%86%E6%9E%B6/Django%E6%A1%86%E6%9E%B6%E4%B9%8B%E5%9F%BA%E7%A1%80%E7%AF%87/"/>
      <url>2021/07/09/web%E5%BC%80%E5%8F%91%E4%B9%8BDjango%E6%A1%86%E6%9E%B6/Django%E6%A1%86%E6%9E%B6%E4%B9%8B%E5%9F%BA%E7%A1%80%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<p><strong>Django框架之基础</strong></p><ul><li><p>Django是用Python语言写的开源web开发框架，并遵循MVC设计。是劳伦斯出版集团开发新闻网站而开发的框架，于2005年7月在BSD许可证发布。</p></li><li><p>MVC框架核心思想是：解耦，让不同的代码之间降低耦合，增强代码的可扩展性和可移植性。</p></li></ul><p>MVC设计流程图：</p><p>客户端————————————&gt;服务器——————————————&gt;数据库</p><p>发出请求———————————&gt;接收请求处理返回结果————————</p>]]></content>
      
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
